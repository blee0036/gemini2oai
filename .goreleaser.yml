# .goreleaser.yml
# 配置 GoReleaser 以构建和发布你的 Go 项目

# 项目名称，将用于二进制文件和归档文件的命名
project_name: gemini2oai

# 全局环境变量，将在 GoReleaser 运行的整个过程中生效
# 注意：这里设置的 CI=false 可能会影响某些库或工具的行为，请确认这是你期望的
env:
  - CI=false
  - GENERATE_SOURCEMAP=false # 这个变量通常与前端构建有关，如果你的 Go 项目不需要，可以考虑移除

# 在构建步骤之前运行的钩子（Hooks）
before:
  hooks:
    # 确保 Go 模块是最新的，并且 go.sum 文件是最新的
    - go mod tidy
    # 你可以在这里添加其他构建前的步骤，例如生成代码、运行测试等
    # - go generate ./...
    # - go test ./...

# Go 模块相关配置
gomod:
  # 使用 Go 模块代理来下载依赖项，推荐在 CI 环境中使用
  proxy: true

# 构建配置
builds:
  -
    # 构建时的环境变量
    env:
      # 静态编译，禁用 CGO，以获得更好的跨平台兼容性
      - CGO_ENABLED=0

    # 输出的二进制文件名称 (不带扩展名)
    # GoReleaser 会自动为 Windows 添加 .exe 扩展名
    binary: gemini2oai # 与 project_name 相同，如果不同则需要特别指定

    # 指定主程序入口（可选，如果你的 main 包在根目录，通常不需要）
    # main: ./cmd/gemini2oai/ # 如果你的入口在 ./cmd/gemini2oai/main.go

    # 目标操作系统
    goos:
      - linux
      - windows
      - darwin

    # 目标 CPU 架构
    goarch:
      - amd64
      - arm
      - arm64
      - "386" # 注意：386 需要用引号括起来，因为 YAML 解析器可能将其视为数字

    # 针对 ARM 架构的特定版本
    goarm:
      - "5"
      - "6"
      - "7"

    # LDFLAGS 用于传递链接器标志，例如注入版本信息
    # ldflags:
    #  - -s -w # 去除调试信息并减小体积
    #  - -X main.version={{.Version}}
    #  - -X main.commit={{.Commit}}
    #  - -X main.date={{.Date}}
    #  - -X main.builtBy=goreleaser

    # 忽略特定的平台组合构建 (例如 Go 不完全支持的组合)
    ignore:
      - goos: windows
        goarm: "5"
      - goos: windows
        goarm: "6"
      - goos: windows
        goarm: "7"

# 归档（打包）配置
archives:
  -
    # 默认归档格式
    format: tar.gz

    # 归档文件的命名模板
    # 使用 {{ .ProjectName }} 来自动引用顶层定义的项目名称
    name_template: >-
      {{ .ProjectName }}_{{ .Version }}_{{ .Os }}_{{ .Arch }}
      {{- if .Arm }}v{{ .Arm }}{{ end }}

    # 包含在归档文件中的额外文件
    # 将常见的 LICENSE 和 README 文件添加到包中
    # 如果文件不存在或不需要，请修改或删除此部分
    files:
      - LICENSE*
      - README*
      - CHANGELOG* # 如果有更新日志文件

    # 为特定操作系统覆盖归档格式
    format_overrides:
      - goos: windows
        format: zip # Windows 用户通常更习惯 ZIP 文件

# 校验和（Checksum）配置
checksum:
  # 校验和文件的名称
  name_template: 'checksums.txt'
  # 使用的算法 (默认是 SHA256，通常无需更改)
  # algorithm: sha256

# 快照（Snapshot）发布配置
# 当你在非 tag 的 commit 上运行 GoReleaser 时（例如在 main 分支上），会创建快照发布
snapshot:
  # 快照版本的命名模板
  # {{ incpatch .Version }} 会自动增加当前最近 tag 的补丁版本号
  name_template: "{{ incpatch .Version }}-next"

# 更新日志（Changelog）配置
changelog:
  # 排序方式：asc (升序) 或 desc (降序)
  sort: asc
  # 过滤掉不需要包含在更新日志中的提交信息
  filters:
    exclude:
      - '^docs:'   # 排除文档相关的提交
      - '^test:'   # 排除测试相关的提交
      - '^chore:'  # 排除日常维护任务的提交
      - 'Merge pull request' # 排除合并 PR 的信息
      - 'Merge branch'      # 排除合并分支的信息

# 发布（Release）配置 (例如发布到 GitHub Releases)
release:
  # 是否创建为草稿 (Draft) 发布
  draft: false

  # 是否标记为预发布 (Prerelease)
  # 'auto' 会根据 Git 标签是否包含连字符 (例如 v1.0.0-rc1) 来自动判断
  prerelease: auto

  # 发布名称的模板 (例如 GitHub Release 的标题)
  # {{.Version}} 会使用 v1.2.3 这样的标签（去掉了 'v' 前缀）
  # {{.Tag}} 会使用完整的标签名，如 v1.2.3
  # {{.ProjectName}} {{.Tag}} 是一个常见的选择
  name_template: "{{.Tag}}" # 使用完整的 Tag 作为 Release 名称

  # GitHub/GitLab Releases 页面的 Body 内容
  # 默认为空，GoReleaser 会自动填充 Changelog 内容
  # header: |
  #   ## My Custom Header
  # footer: |
  #   ## My Custom Footer
  #   Generated by GoReleaser

  # 如果你的 Git 仓库托管在 GitHub Enterprise 或自托管的 GitLab 上，需要配置 urls
  # github:
  #   owner: your_org
  #   name: your_repo
  # gitlab:
  #   owner: your_group
  #   name: your_project

# 如果你需要生成 Linux 包 (deb, rpm) 或 macOS 包 (brew) 等，可以在这里添加相应配置
# nfpms:
#   ...
# brews:
#   ...
# dockers:
#   ...